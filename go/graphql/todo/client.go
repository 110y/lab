// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package main

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Todos []*Todo "json:\"todos\" graphql:\"todos\""
}

type Mutation struct {
	CreateTodo Todo "json:\"createTodo\" graphql:\"createTodo\""
}

type ListTodo struct {
	Todos []*struct {
		ID   string "json:\"id\" graphql:\"id\""
		Text string "json:\"text\" graphql:\"text\""
	} "json:\"todos\" graphql:\"todos\""
}

const ListTodoDocument = `query ListTodo ($id: ID!) {
	todos(id: $id) {
		id
		text
	}
}
`

func (c *Client) ListTodo(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*ListTodo, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ListTodo
	if err := c.Client.Post(ctx, "ListTodo", ListTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
